name: Release

# Se dispara cuando haces push de un tag que empieza con 'v'
# Ejemplo: git tag v1.0.0 && git push --tags
on:
  push:
    tags:
      - 'v*'

# Permisos necesarios para crear releases
permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.get_version.outputs.VERSION }}`,
              name: `TPS Intermotors v${{ steps.get_version.outputs.VERSION }}`,
              body: `## =€ Nueva versión v${{ steps.get_version.outputs.VERSION }}

              ### =Ë Cambios
              - Ver commits para detalles completos

              ### =æ Instalación
              - **Windows MSI**: Descarga \`TPS-Intermotors_${{ steps.get_version.outputs.VERSION }}_x64_en-US.msi\`
              - **Windows NSIS**: Descarga \`TPS-Intermotors_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe\`

              ### = Actualización
              Si ya tienes la app instalada, usa el botón "Buscar actualizaciones" en Configuración.

              ---

              > Generado automáticamente por GitHub Actions`,
              draft: false,
              prerelease: false
            });
            return data.id;

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        # Puedes agregar más plataformas después:
        # platform: [windows-latest, ubuntu-22.04, macos-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Si tienes configurada la firma digital, descomenta estas líneas:
          # TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          # TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          # No crear un nuevo release, usar el que ya creamos
          tagName: ${{ github.ref_name }}
          releaseName: 'TPS Intermotors __VERSION__'
          releaseBody: 'Ver release notes arriba'
          releaseDraft: false
          prerelease: false

  # Job para generar latest.json (necesario para Tauri Updater)
  generate-update-manifest:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download release assets info
        id: get_assets
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });

            const assets = release.data.assets;
            const msiAsset = assets.find(a => a.name.endsWith('.msi'));
            const sigAsset = assets.find(a => a.name.endsWith('.msi.sig'));

            return {
              msiUrl: msiAsset?.browser_download_url || '',
              sigUrl: sigAsset?.browser_download_url || '',
              msiName: msiAsset?.name || ''
            };

      - name: Generate latest.json
        run: |
          cat > latest.json << EOF
          {
            "version": "v${{ steps.get_version.outputs.VERSION }}",
            "notes": "Ver changelog completo en GitHub Releases",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "${{ fromJSON(steps.get_assets.outputs.result).sigUrl }}",
                "url": "${{ fromJSON(steps.get_assets.outputs.result).msiUrl }}"
              }
            }
          }
          EOF

          cat latest.json

      - name: Upload latest.json to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'latest.json',
              data: fs.readFileSync('latest.json')
            });
